/* eslint-disable @typescript-eslint/no-empty-object-type */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/login": {
    /** Authenticate user */
    post: {
      parameters: {
        body: {
          /** Login credentials */
          request: definitions["req.LoginUserRequest"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["res.SuccessResponse"];
        };
        /** Unauthorized */
        401: {
          schema: definitions["res.ErrorResponse"] & {
            error?: definitions["errs.IncorrectPasswordError"];
          };
        };
        /** Not Found */
        404: {
          schema: definitions["res.ErrorResponse"] & {
            error?: definitions["errs.UserNotFoundError"];
          };
        };
        /** Unprocessable Entity */
        422: {
          schema: definitions["res.ErrorResponse"] & {
            error?: definitions["errs.ValidationFailedError"];
          };
        };
      };
    };
  };
  "/auth/logout": {
    /** Logout user */
    post: {
      responses: {
        /** OK */
        200: {
          schema: definitions["res.SuccessResponse"];
        };
        /** Bad Request */
        400: {
          schema: definitions["res.ErrorResponse"] & {
            error?: definitions["errs.AuthError"];
          };
        };
      };
    };
  };
  "/auth/register": {
    /** Register user */
    post: {
      parameters: {
        body: {
          /** Register credentials */
          request: definitions["req.RegisterUserRequest"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["res.SuccessResponse"];
        };
        /** Not Found */
        404: {
          schema: definitions["res.ErrorResponse"] & {
            error?: definitions["errs.AppError"];
          };
        };
        /** Conflict */
        409: {
          schema: definitions["res.ErrorResponse"] & {
            error?: definitions["errs.AlreadyExistsError"];
          };
        };
        /** Unprocessable Entity */
        422: {
          schema: definitions["res.ErrorResponse"] & {
            error?: definitions["errs.ValidationFailedError"];
          };
        };
      };
    };
  };
}

export interface definitions {
  "errs.AlreadyExistsError": {
    /** @example ALREADY_EXISTS */
    code?: string;
    /** @example User already exists. */
    message?: string;
    /** @example 409 */
    status?: number;
  };
  "errs.AppError": {
    code?: string;
    details?: unknown;
    message?: string;
    status?: number;
  };
  "errs.AuthError": {
    /** @example AUTH_FAILED */
    code?: string;
    /** @example Failded authorize user. */
    message?: string;
    /** @example 400 */
    status?: number;
  };
  "errs.IncorrectPasswordError": {
    /** @example INCORRECT_PASSWORD */
    code?: string;
    /** @example Incorrect password. */
    message?: string;
    /** @example 401 */
    status?: number;
  };
  "errs.UserNotFoundError": {
    /** @example USER_NOT_FOUND */
    code?: string;
    /** @example User not found. */
    message?: string;
    /** @example 400 */
    status?: number;
  };
  "errs.ValidationFailedError": {
    /** @example VALIDATION */
    code?: string;
    /** @example Validation error. */
    message?: string;
    /** @example 422 */
    status?: number;
  };
  "req.LoginUserRequest": {
    email: string;
    password: string;
  };
  "req.RegisterUserRequest": {
    email: string;
    name: string;
    password: string;
  };
  "res.ErrorResponse": {
    error?: definitions["errs.AppError"];
    /** @example false */
    success?: boolean;
  };
  "res.SuccessResponse": {
    /** @example true */
    success?: boolean;
  };
}

export interface operations {}

export interface external {}
